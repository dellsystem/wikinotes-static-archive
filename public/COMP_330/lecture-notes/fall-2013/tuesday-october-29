<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_330/">
                COMP 330
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Tuesday, October 29, 2013
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Tuesday, October 29, 2013
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
            <div class="sub header">
                Turing machines
            </div>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <p>Guest lecture by Artem on Turing machines.</p>
<p>Some relevant links:</p>
<ul>
<li><a href="http://cstheory.stackexchange.com/questions/11797/alan-turings-contributions-to-computer-science">Alan Turing's contributions to computer science - Theoretical Computer Science Stack Exchange</a></li>
<li><a href="http://egtheory.wordpress.com/2012/06/23/turing-biolog/">How would Turing develop biology?</a></li>
<li><a href="http://cstheory.stackexchange.com/questions/2052/is-magic-the-gathering-turing-complete">Is Magic: the Gathering Turing-complete? - Theoretical Computer Science Stack Exchange</a></li>
</ul>
<div class="toc">
<ul>
<li><a href="#introduction-to-turing-machines">1 Introduction to Turing machines</a><ul>
<li><a href="#definition">1.1 Definition</a><ul>
<li><a href="#example">1.1.1 Example</a></li>
</ul>
</li>
<li><a href="#multi-tape-machines">1.2 Multi-tape machines</a><ul>
<li><a href="#church-turing-thesis">1.2.1 Church-Turing thesis</a></li>
</ul>
</li>
<li><a href="#some-comments-on-turing-machines">1.3 Some comments on Turing machines</a><ul>
<li><a href="#infinity-and-beyond-turing-machine-edition">1.3.1 Infinity and beyond: Turing machine edition</a></li>
<li><a href="#non-determinism">1.3.2 Non-determinism</a></li>
<li><a href="#two-stack-pdas">1.3.3 Two-stack PDAs</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<h2 class="header"><i>1</i>Introduction to Turing machines<a class="headerlink" href="#introduction-to-turing-machines" name="introduction-to-turing-machines">&para;</a></h2>
<h3 class="header"><i>1.1</i>Definition<a class="headerlink" href="#definition" name="definition">&para;</a></h3>
<p>A Turing machine is defined as <span>$M = (Q, \Sigma, \Gamma, \vdash, \sqcup, \delta, q_0, r)$</span>, where the components are defined as follows:</p>
<ul>
<li><span>$Q$</span>: finite set of states</li>
<li><span>$\Sigma$</span>: input alphabet</li>
<li><span>$\Gamma \subseteq \Sigma$</span>: tape alphabet</li>
<li><span>$\vdash \in \Sigma$</span>: a special character at the beginning of the string</li>
<li><span>$\sqcup \in \Gamma$</span>: a special symbol that represents a blank space<sup id="fnref:sqcup"><a href="#fn:sqcup" rel="footnote" title="This isn't quite the right character but \\textvis...">1</a></sup></li>
<li><span>$\delta$</span>: the usual transition function, <span>$Q \times \Gamma \to Q \times \Gamma \times \{L, R\}$</span> where <span>$L$</span> means "go left" and <span>$R$</span> means "go right"</li>
<li><span>$q_0$</span>: start state</li>
<li><span>$t$</span>: accept state</li>
<li><span>$r$</span>: reject state</li>
</ul>
<h4 class="header"><i>1.1.1</i>Example<a class="headerlink" href="#example" name="example">&para;</a></h4>
<p>Consider the following language:</p>
<p><span>$$L = \{a^{2^n} \mid n \geq 0\}$$</span></p>
<p>If we wanted to build a Turing machine for recognising this language, we could use the following algorithm: if there is only one <span>$a$</span>, we accept immediately. Otherwise, sweep across the tape, starting from the left, crossing off every second <span>$a$</span>. We can use part of our state to remember the parity of the number of <span>$a$</span>'s - if there is an odd number that have been marked by the time we get to <span>$\sqcup$</span> (the end of word character), we reject.</p>
<p>This description isn't very good, but the machine looks something like this:</p>
<p><img alt="Turing machine diagram" src="http://i.imgur.com/EyGSl8N.png" title="Original diagram, released under CC0" /></p>
<p>(This was the diagram given in class. Apparently some other states need a looping transition of the form <span>$\checkmark \to \checkmark, R$</span> like the one <span>$q_0$</span> has, but I'm not sure which ones, or why.)</p>
<p>A diagram for this Turing machine can be found on page 144 of the textbook.</p>
<h3 class="header"><i>1.2</i>Multi-tape machines<a class="headerlink" href="#multi-tape-machines" name="multi-tape-machines">&para;</a></h3>
<p>We can convert any multi-tape machine into an equivalent single-tape machine. For example, consider a three-tape machine, whose transition function looks like <span>$Q \times \Gamma^3 \to Q \times \Gamma^3 \times \{L, R\}$</span>. Instead of using three tapes, we can use just one, and use the \^ character to mark where the heads would be for each of the tapes.</p>
<p>Then, the new tape alphabet would be <span>$\Gamma' = \Sigma \cup \{\vdash \} \cup (\Gamma \cup \hat \Gamma)^3$</span> where <span>$\hat \Gamma = \{\hat a \mid a \in \Gamma \}$</span>. So we're essentially using these special <span>$\hat a$</span> characters to simulate where the head is for each tape.</p>
<p>This new single-tape Turing machine would behave as follows: we start at the left, and scan to the right until we see all 3 heads. Then, we carry out the transitions of the original multi-tape machine, updating marked characters accordingly. This is apparently enough to simulate the original machine.</p>
<p>Note that this wouldn't work on an infinite-tape machine, since then we'd have an infinite number of computations at each step (which is not allowed).</p>
<p>Also note that the first character for each tape is <span>$\vdash$</span>. The one after the string ends if <span>$\sqcup$</span>, and it's <span>$\sqcup$</span> forever after that.</p>
<h4 class="header"><i>1.2.1</i>Church-Turing thesis<a class="headerlink" href="#church-turing-thesis" name="church-turing-thesis">&para;</a></h4>
<blockquote>
<p>Any kind of computation with a finite<sup id="fnref:finite"><a href="#fn:finite" rel="footnote" title="This excludes the case of giving, say, a real numb...">2</a></sup> amount of information per time step is no more powerful than a Turing machine.</p>
</blockquote>
<h3 class="header"><i>1.3</i>Some comments on Turing machines<a class="headerlink" href="#some-comments-on-turing-machines" name="some-comments-on-turing-machines">&para;</a></h3>
<h4 class="header"><i>1.3.1</i>Infinity and beyond: Turing machine edition<a class="headerlink" href="#infinity-and-beyond-turing-machine-edition" name="infinity-and-beyond-turing-machine-edition">&para;</a></h4>
<p>The number of Turing machines is countably infinite.</p>
<p>The number of languages is uncountably infinite.</p>
<p>Thus, there are languages that cannot be recognised by Turing machines. In fact, there are infinitely many of them.</p>
<h4 class="header"><i>1.3.2</i>Non-determinism<a class="headerlink" href="#non-determinism" name="non-determinism">&para;</a></h4>
<p>Recall that when reading a word, a TM can either accept, reject, or continue without halting. What if we were to add non-determinism to the mix? So that if any path in the tree leads to an accept state, we accept?</p>
<p>This would actually have the same expressiveness as that of deterministic Turing machines. To prove this, we can't use the same procedure that we used for converting an NFA to a DFA, since that doesn't keep track of what changes have been made to the tape. Instead, we use two tapes - one for history, one for scratch - and simulate breadth-first search<sup id="fnref:bfs"><a href="#fn:bfs" rel="footnote" title="Not depth-first search because then you could get ...">3</a></sup> on all possibilities. As we learned earlier, we can convert any two-tape machine into a single-tape machine, so this should<sup id="fnref:should"><a href="#fn:should" rel="footnote" title="Well, it would if it were an actual proof and not ...">4</a></sup> suffice to prove that non-deterministic Turing machines are no more powerful than deterministic Turing machines.</p>
<h4 class="header"><i>1.3.3</i>Two-stack PDAs<a class="headerlink" href="#two-stack-pdas" name="two-stack-pdas">&para;</a></h4>
<p>To simulate a TM using a pushdown automaton with two stacks, we use one stack for the left side of the tape, and another stack for the right side.</p>
<div class="footnote">
<div class="ui divider"></div>
<ol>
<li id="fn:sqcup">
<p>This isn't quite the right character but \textvisiblespace doesn't work in math mode :(&#160;<a href="#fnref:sqcup" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:finite">
<p>This excludes the case of giving, say, a real number as input, since that's already an infinite amount of information.&#160;<a href="#fnref:finite" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:bfs">
<p>Not depth-first search because then you could get stuck in a branch&#160;<a href="#fnref:bfs" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
<li id="fn:should">
<p>Well, it would if it were an actual proof and not merely a sketch.&#160;<a href="#fnref:should" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p>
</li>
</ol>
</div>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
