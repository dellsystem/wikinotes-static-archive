<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_330/">
                COMP 330
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Thursday, October 17, 2013
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Thursday, October 17, 2013
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
            <div class="sub header">
                Pushdown automata
            </div>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <p>A CFG for balanced parentheses. Closure properties of CFLs. Introduction to pushdown automata.</p>
<div class="toc">
<ul>
<li><a href="#a-cfg-for-balanced-parentheses">1 A CFG for balanced parentheses</a></li>
<li><a href="#closure-properties-of-cfls">2 Closure properties of CFLs</a></li>
<li><a href="#pushdown-automata-pdas">3 Pushdown automata (PDAs)</a><ul>
<li><a href="#methods-of-acceptance">3.1 Methods of acceptance</a></li>
<li><a href="#example">3.2 Example</a></li>
<li><a href="#relationship-between-determinism-and-ambiguity">3.3 Relationship between determinism and ambiguity</a></li>
<li><a href="#relationship-between-cfls-and-pdas">3.4 Relationship between CFLs and PDAs</a></li>
<li><a href="#decision-problems">3.5 Decision problems</a></li>
</ul>
</li>
</ul>
</div>
<h2 class="header"><i>1</i>A CFG for balanced parentheses<a class="headerlink" href="#a-cfg-for-balanced-parentheses" name="a-cfg-for-balanced-parentheses">&para;</a></h2>
<p>Consider the following CFG:</p>
<p><span>$$S \to (S)S \mid \epsilon$$</span></p>
<p>Just by looking at it, we can guess that generates balanced parentheses. However, does it generate <em>all</em> possible words with balanced parentheses? And can we <em>prove</em> that it only generates balanced parentheses?</p>
<p>First, we formally define what it means for the parentheses to be balanced. A sequence of parentheses is said to be property nested if <span>$N_( = N_)$</span> (where <span>$N_a$</span> is the count of the letter <span>$a$</span> in the word) and, for every prefix, <span>$N_( \geq N_)$</span>.</p>
<p>Now let's prove that our CFG satisfies the definition of proper nesting, using induction on the number of times the start rule is applied. Suppose <span>$S \xrightarrow{*} (\alpha)\beta$</span>, where <span>$\xrightarrow{*}$</span> means the rule has been applied some number of times, and <span>$\alpha, \beta$</span> are strings of parentheses. <span>$\alpha$</span> must have been generated as <span>$S \xrightarrow{*} \alpha$</span>; similarly, <span>$\beta$</span> must have been generated as <span>$S \xrightarrow{*} \beta$</span>. But <span>$\alpha$</span> and <span>$\beta$</span> are shorter strings, so by the inductive hypothesis, they are both properly nested. Thus <span>$N_( = N_)$</span>.</p>
<p>Next, we have to look at all the possible prefixes. We have <span>$($</span>, <span>$(\alpha'$</span> [where <span>$\alpha'$</span> is some prefix of <span>$\alpha$</span>, including <span>$\alpha$</span> itself], <span>$(\alpha)$</span>, and <span>$(\alpha)\beta'$</span> [where <span>$\beta'$</span> is some prefix of <span>$\beta$</span>, including <span>$\beta$</span>]. We see easily that <span>$N_( \geq N_)$</span> for every possible prefix. So our CFG does indeed generate properly nested parentheses.</p>
<p>Incidentally, it would not be possible to recognise a properly nested language using a finite state machine (FSM), since we know that FSMs are unable to do true counting and our definition for proper nesting clearly requires counting.</p>
<h2 class="header"><i>2</i>Closure properties of CFLs<a class="headerlink" href="#closure-properties-of-cfls" name="closure-properties-of-cfls">&para;</a></h2>
<p>If <span>$L_1$</span> and <span>$L_2$</span> are both CFLs, then:</p>
<ol>
<li><span>$L_1 \cup L_2$</span> <strong>is</strong>  a CFL (proof: create a new start symbol <span>$S'$</span>, and add new rules <span>$S' \to S_1$</span> and <span>$S' \to S_2$</span>)</li>
<li><span>$L_1 \cdot L_2$</span> <strong>is</strong> a CFL (proof: create a new start symbol <span>$S'$</span>, and add the rule <span>$S' \to S_1S_2$</span>)</li>
<li><span>$L^*$</span> <strong>is</strong> a CFL (left as an exercise for the reader)</li>
<li><span>$L_1 \cap L_2$</span> <strong>may not be</strong> a CFL (counterexample: <span>$\{a^nb^nc^m\} \cap \{a^nb^mc^m\} = \{a^nb^nc^n\}$</span> which is not a context-free language)</li>
</ol>
<p>Note that if <span>$L_1$</span> is a CFL and <span>$R$</span> is regular, then <span>$L \cap R$</span> is a CFL.</p>
<p>Furthermore, CFLs are not closed under complementation (this follows from the above properties).</p>
<h2 class="header"><i>3</i>Pushdown automata (PDAs)<a class="headerlink" href="#pushdown-automata-pdas" name="pushdown-automata-pdas">&para;</a></h2>
<p>Much like regular languages have DFAs, <strong>pushdown automata (PDAs)</strong> are the corresponding languages for CFLs. They are equivalent in terms of expressiveness to DFAs with an unbounded stack. (As an aside, note that we cannot compare the power of a DFA + queue to that of a DFA + stack; they're just not comparable. Also note that a DFA + 2 stacks is equivalent to a Turing machine.)</p>
<p>We formally define a PDA as <span>$(Q, \Sigma, \Gamma, \delta, q_0, F)$</span>:</p>
<ul>
<li><span>$Q$</span>: a finite set of states</li>
<li><span>$\Sigma$</span>: input alphabet</li>
<li><span>$\Gamma$</span>: the finite stack alphabet (where usually <span>$\Sigma \subseteq \Gamma$</span><sup>is this right?</sup>)</li>
<li><span>$\delta$</span>: the transition function, <span>$Q \times \Sigma_\epsilon \times \Gamma_\epsilon \to P(Q \times \Gamma_\epsilon)$</span> (where <span>$\Gamma_\epsilon = \Gamma \cup \{\epsilon\}$</span>)</li>
<li><span>$q_0$</span>: the initial state</li>
<li><span>$F \subseteq Q$</span>: the set of accept states</li>
</ul>
<p>Note that we are working with non-deterministic PDAs here. Deterministic PDAs are strictly less powerful than nondeterministic ones.</p>
<p>The notation for transitions looks like <span>$a, b \to c$</span> where <span>$a \in \Sigma$</span>, <span>$b \in \Gamma$</span> and <span>$c \in \Gamma$</span>. This is interpreted as follows: if we read letter <span>$a$</span> and see <span>$b$</span> at the top of the stack, we push <span>$c$</span> onto the stack. If <span>$c$</span> is <span>$\epsilon$</span>, this is tantamount to popping <span>$a$</span> from the stack. We treat \$ as a special end-of-stack symbol (<span>$\in \Gamma$</span>) to indicate the bottom of the stack.</p>
<p>Here's an example of a PDA diagram:</p>
<p><img alt="PDA" src="http://i.imgur.com/QmXphxh.png" title="Original diagram; released under CC0" /></p>
<h3 class="header"><i>3.1</i>Methods of acceptance<a class="headerlink" href="#methods-of-acceptance" name="methods-of-acceptance">&para;</a></h3>
<p>There are two different notions of acceptance when it comes to PDAs:</p>
<ul>
<li>Acceptance by final state (same as with DFAs)</li>
<li>Acceptance by empty stack (don't designate any states to be final states, and only accept when the stack is empty at the end of a word)</li>
</ul>
<p>These notions are equivalent in expressiveness.</p>
<h3 class="header"><i>3.2</i>Example<a class="headerlink" href="#example" name="example">&para;</a></h3>
<p><span>$$L = \{a^ib^{i+j}c^j \mid i, j \geq 0 \}$$</span></p>
<p>One possible CFG for this has the following rules:</p>
<p><span>$$\begin{align}
S &amp; \to XY \\
X &amp; \to aXb \mid \epsilon \\
Y &amp; \to bYc \mid \epsilon
\end{align}$$</span></p>
<p><em>The diagram has been omitted because the one given in class is not entirely accurate - for instance, it wouldn't accept "ab". Drawing an accurate PDA diagram for this CFL is thus left as an exercise for the reader.</em></p>
<h3 class="header"><i>3.3</i>Relationship between determinism and ambiguity<a class="headerlink" href="#relationship-between-determinism-and-ambiguity" name="relationship-between-determinism-and-ambiguity">&para;</a></h3>
<p>Consider the following language</p>
<p><span>$$L = \{a^ib^jc^k \mid i, j, k \geq 1 ; i = j \text{ or } j = k \}$$</span></p>
<p>Here's a grammar for this language:</p>
<p><span>$$\begin{align}
S &amp; \to XC \mid AY \tag{where $C$ is a rule for generating unbounded $c$'s} \\
X &amp; \to aXb \mid ab \\
Y &amp; \to bYc \mid bc \\
C &amp; \to cC \mid c \\
A &amp; \to aA \mid a
\end{align}$$</span></p>
<p>This grammar happens to be ambiguous - there are two ways of generating <span>$abc$</span>, for instance. Indeed, there is no way to design an <em>unambiguous</em> grammar for this language, as this language is inherently ambiguous. Thus, any associated PDA <em>has</em> to be nondeterministic.</p>
<p>Here's the reason non-deterministic and deterministic PDAs are not equivalent in terms of their power. With finite state machines, we were able to convert an arbitrary NFA to a DFA by building a DFA that used states to keep track of the set of states each transition could bring us to in an NFA. If we tried to apply this same idea to PDAs, we come across the issue of potentially infinite sets, due to the existence of the unbounded stack. Thus we wouldn't be able to represent all of the possible sets of states that can be transitioned to in the non-deterministic version with a finite number of states.</p>
<p>Note that for a PDA with 2 stacks, the non-deterministic and deterministic versions are equivalent.</p>
<p>Let's formalise the notion of a <strong>deterministic pushdown automaton (DPDA)</strong> and its relation to ambiguity. A PDA is a DPDA if:</p>
<ol>
<li><span>$\delta(q, a, x)$</span> is always a singleton (set with only one element)</li>
<li>if <span>$\delta(q, a, x)$</span> is non-empty then <span>$\delta(q, \epsilon, x)$</span> must be empty</li>
</ol>
<p>Every CFL accepted by a DPDA has an unambiguous grammar. The converse, however, is not true. Consider <span>$L = \{ww^{\text{rev}} \mid w \in \Sigma^*\}$</span>. This cannot be recognised by a DPDA as you'd have to guess, in a non-deterministic manner, when the word is complete. And yet, there's a non-ambiguous grammar for it:</p>
<p><span>$$S \to aSa \mid bSb \mid \epsilon$$</span></p>
<p>Incidentally, if we were to add a separator character in the middle - for example, <span>$\#$</span> - then we <em>would</em> be able to recognise the resulting language (<span>$L = \{w\#w^{\text{rev}} \mid w \in \{a, b\}^*\}$</span> and <span>$\Sigma = \{a, b, \#\}$</span> using a DPDA.</p>
<h3 class="header"><i>3.4</i>Relationship between CFLs and PDAs<a class="headerlink" href="#relationship-between-cfls-and-pdas" name="relationship-between-cfls-and-pdas">&para;</a></h3>
<blockquote>
<p>Theorem: a language is context-free <span>$\iff$</span> it has a corresponding PDA.</p>
</blockquote>
<p>Proof omitted.</p>
<h3 class="header"><i>3.5</i>Decision problems<a class="headerlink" href="#decision-problems" name="decision-problems">&para;</a></h3>
<p>Context-free languges are quite a bit more complicated than regular languages. It was not known until the late 90's if there was even a way of knowing if two DPDAs are equivalent. Regular languages, in contrast, are quite well-understood. Here are some notable decision problems for context-free languages, some of which are known to be undecidable</p>
<ol>
<li><span>$L(G) \overset{?}{=} \varnothing$</span> - i.e., is the language generated by the grammar <span>$G$</span> the empty language? For example, the grammar with one rule <span>$S \to aSb$</span> does not generate anything. This is decidable - we can solve this by checking if the start symbol is productive<sup id="fnref:productive"><a href="#fn:productive" rel="footnote" title="A variable is called productive if it produces a s...">1</a></sup>.</li>
<li><span>$w \in L(G)$</span> - i.e., given a word and a grammar, can we check if the word is part of the language generated by that grammar? This is also decidable; there exists an <span>$O(n^3)$</span> algorithm for this that makes use of dynamic programming techniques.</li>
<li><span>$L(G) \overset{?}{=} \Sigma^*$</span> - undecidable</li>
<li>Is <span>$G$</span> ambiguous? - undecidable</li>
<li><span>$L(G_1) \cap L(G_2) \overset{?}{=} \varnothing$</span> - undecidable</li>
<li>Given some ambiguous grammar <span>$G$</span>, is <span>$L(G)$</span> inherently ambiguous? - undecidable</li>
</ol>
<div class="footnote">
<div class="ui divider"></div>
<ol>
<li id="fn:productive">
<p>A variable is called productive if it produces a string (i.e., terminal characters) at some point.&#160;<a href="#fnref:productive" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
