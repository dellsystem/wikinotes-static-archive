<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_409/">
                COMP 409
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Wednesday, September 18, 2013
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Wednesday, September 18, 2013
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
            <div class="sub header">
                Concurrency with Java and PThreads &amp; Locks
            </div>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <div class="toc">
<ul>
<li><a href="#java-concurrency">1 Java Concurrency</a><ul>
<li><a href="#the-thread-object">1.1 The Thread object</a></li>
<li><a href="#when-does-the-application-end">1.2 When does the application end?</a></li>
<li><a href="#scheduling">1.3 Scheduling</a></li>
<li><a href="#overview-of-the-thread-api">1.4 Overview of the Thread API</a></li>
<li><a href="#synchronization">1.5 Synchronization</a><ul>
<li><a href="#the-synchronized-keyword">1.5.1 The "synchronized" keyword</a></li>
<li><a href="#the-volatile-keyword">1.5.2 The "volatile" keyword</a></li>
<li><a href="#important-point">1.5.3 Important point</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#pthreads">2 PThreads</a><ul>
<li><a href="#thread-creation">2.1 Thread creation</a><ul>
<li><a href="#attributes">2.1.1 Attributes</a></li>
</ul>
</li>
<li><a href="#scheduling-model">2.2 Scheduling model</a></li>
<li><a href="#mutual-exclusion">2.3 Mutual exclusion</a></li>
</ul>
</li>
<li><a href="#locks">3 Locks</a><ul>
<li><a href="#filter-algorithm">3.1 Filter Algorithm</a></li>
</ul>
</li>
<li><a href="#correctness-of-the-filter-lock-algorithm">4 Correctness of the filter-lock algorithm</a><ul>
<li><a href="#proof-by-induction">4.1 Proof by induction</a><ul>
<li><a href="#base-case">4.1.1 Base Case</a></li>
<li><a href="#inductive-step">4.1.2 Inductive step</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#hardware-support-for-mutual-exclusion">5 Hardware support for mutual exclusion</a><ul>
<li><a href="#test-and-set-instruction">5.1 Test-and-set instruction</a><ul>
<li><a href="#spin-lock-based-with-test-and-set">5.1.1 Spin lock based with Test-and-set</a></li>
<li><a href="#test-and-test-and-set">5.1.2 Test-and-test-and-set</a></li>
</ul>
</li>
<li><a href="#fetch-and-add">5.2 Fetch-and-add</a></li>
<li><a href="#compare-and-swap">5.3 Compare-and-swap</a></li>
</ul>
</li>
</ul>
</div>
<h2 class="header"><i>1</i>Java Concurrency<a class="headerlink" href="#java-concurrency" name="java-concurrency">&para;</a></h2>
<p>In Java, concurrency is built-in. Java was designed to support concurrency from the start and supports a rich API: <code>java.util.concurrent</code>.</p>
<h3 class="header"><i>1.1</i>The Thread object<a class="headerlink" href="#the-thread-object" name="the-thread-object">&para;</a></h3>
<p>Concurrency in Java follows an object oriented model.</p>
<p>Once a <code>Thread</code> object is instantiated, it may be started using <code>Thread.start()</code>.</p>
<p>The code run by the thread is specified by <code>myThread.run()</code>. It either comes from overriding it when extending the class, or by extending the <code>Thread</code> class or implementing the <code>Runnable</code> interface.</p>
<p>The former method is typically used for using up the hierarchy, or changing the behavior of a <code>Thread</code>.</p>
<p>For generic MT execution, however, it is preferable to simply construct a <code>Thread</code> with a <code>Runnable</code>.</p>
<h3 class="header"><i>1.2</i>When does the application end?<a class="headerlink" href="#when-does-the-application-end" name="when-does-the-application-end">&para;</a></h3>
<p>The main thread finishes when the <code>main()</code> function finishes. Individual threads, however, finish when their <code>run()</code> ends. This might happen after the end of <code>main()</code>.</p>
<p>As for the whole application, it finishes when all non-daemon threads are finished.</p>
<dl>
<dt>Daemon thread</dt>
<dd>A thread meant to be used as a service provider</dd>
<dt>Non-daemon thread</dt>
<dd>The default type of threads, they are meant to be able to control the flow of the program.</dd>
</dl>
<h3 class="header"><i>1.3</i>Scheduling<a class="headerlink" href="#scheduling" name="scheduling">&para;</a></h3>
<p><img alt="Thread State Diagram" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-09.png" title="" /></p>
<p>There is a <strong>"nominally" priority-preemptive execution model</strong> that we may expect to be respected.</p>
<table class="ui celled padded table">
<thead>
<tr>
<th>Priority</th>
<th>Threads</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>High</strong></td>
<td><code>A</code> <span>$\rightarrow$</span> <code>B</code> <span>$\rightarrow$</span> <code>C</code></td>
</tr>
<tr>
<td><strong>Premptive</strong></td>
<td><code>D</code> <span>$\rightarrow$</span> <code>E</code> <span>$\rightarrow$</span> <code>F</code> <span>$\rightarrow$</span> <code>G</code></td>
</tr>
<tr>
<td><strong>Low</strong></td>
<td><code>H</code> <span>$\rightarrow$</span> <code>I</code></td>
</tr>
</tbody>
</table>
<p>Under this model, the OS causes high-priority threads to execute only if no higher priority thread is able to execute and threads in the next priority class get a chance to execute.</p>
<p>However, there is <strong>no guarantee</strong> that this model is always respected!</p>
<ul>
<li>There may be <strong>"run-to-completion"</strong> where there is no time-slicing. As such, threads must momentarilly give up time slice themselves using <code>yield()</code>.</li>
<li><strong>Priorities</strong> may not be respected.</li>
<li><strong>Round-robin</strong> might not be respected. Threads of a process may execute among those of another process.</li>
</ul>
<h3 class="header"><i>1.4</i>Overview of the Thread API<a class="headerlink" href="#overview-of-the-thread-api" name="overview-of-the-thread-api">&para;</a></h3>
<dl>
<dt><code>Thread.yield()</code></dt>
<dd>A static method used to notify the OS that the current thread is willing to give up the CPU for a while, thus letting the thread scheduler select another thread to run.</dd>
<dt><code>Thread.sleep(long time)</code></dt>
<dd>A static method to let the current thread sleep for a certain amount of time in milliseconds. The time specified merely acts a lower-bound, and there is no guarantee on the precision of the timing.</dd>
<dt><code>Thread.currentThread()</code></dt>
<dd>A static method to "know who the thread is".</dd>
<dt><code>Thread.join()</code></dt>
<dd>A method called on a <code>Thread</code> to make the thread executing the call wait for this other thread to finish before going on.</dd>
</dl>
<p><img alt="join() Sequence diagram" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-10.png" title="" /></p>
<dl>
<dt><code>Thread.isAlive()</code> (or rather <code>wasAlive()</code>)</dt>
<dd>A method to tell if a thread is alive (started and not dead yet). In practice, it is possible for the method to return <code>true</code>, but for the specific thread to have died before the caller could use the value. <code>stale</code> value.</dd>
<dt><code>Thread.stop()</code> (deprecated)</dt>
<dd>A method which forces a thread to stop executing. It is dangerous to use it because it may jeopardize the rest of the application. All the resources the thread had locked are suddenly unlocked, which may cause problems if they were in an inconsistent state.</dd>
<dt><code>Thread.destroy()</code> (deprecated)</dt>
<dd>A method a bit like <code>Thread.stop()</code>, but without even releasing the locks. Nobody even bothered implementing that.</dd>
</dl>
<h3 class="header"><i>1.5</i>Synchronization<a class="headerlink" href="#synchronization" name="synchronization">&para;</a></h3>
<p>Java offers basic synchronization mechanisms through the use of the <code>synchronized</code> and <code>volatile</code> keywords.</p>
<h4 class="header"><i>1.5.1</i>The "synchronized" keyword<a class="headerlink" href="#the-synchronized-keyword" name="the-synchronized-keyword">&para;</a></h4>
<p>The <code>synchronized</code> keyword allows an object to be locked for as long as a thread is in a defined critical section.</p>
<p>There are two ways to use this keyword. Firstly, around the object:</p>
<div class="codehilite"><pre><span class="kd">synchronized</span><span class="o">(</span><span class="n">foo</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// foo is now locked</span>
  <span class="cm">/* Critical section */</span>
<span class="o">}</span> <span class="c1">// foo is now unlocked.</span>
</pre></div>


<p>Say a thread executes this code. Then, for as long as it is in the critical section, any other thread will have to wait before using methods of the locked object.</p>
<p>Secondly, the keyword may be used when declaring a method:</p>
<div class="codehilite"><pre><span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// This object is now locked</span>
  <span class="cm">/* Critical section */</span>
<span class="o">}</span> <span class="c1">// This object is now unlocked</span>
</pre></div>


<p>This is similar to declaring the method without the <code>synchronized</code> keyword and having a <code>synchronized(this) {}</code> block inside instead. As for a <code>static synchronized</code> method, it is similar to having a <code>synchronized(NameOfThatClass.class) {}</code> block instead.</p>
<p>Recursive entry is allowed with <code>synchronized</code> methods. Even if a thread already has a lock, it can reacquire it, but it must release it as many times it has acquired it.</p>
<h4 class="header"><i>1.5.2</i>The "volatile" keyword<a class="headerlink" href="#the-volatile-keyword" name="the-volatile-keyword">&para;</a></h4>
<p>The <code>volatile</code> keyword informs the compiler that a specific variable may change asynchonously.</p>
<p>For example, consider that a static variable <code>x</code> is accessible by two threads:</p>
<ul>
<li>The first thread uses it in a while loop to achieve a busy loop: <code>while (x == 0);</code>.</li>
<li>The second thread changes the value of <code>x</code> at some point to signal the first thread to go on.</li>
</ul>
<p>The compiler, seeing that, <code>x</code> in the first thread cannot be written before the loop, may transform the loop into <code>while (true);</code> to accessing <code>x</code> at all. There was no way for it to know it would be changed by another thread.</p>
<p>The solution is to use the <code>volatile</code> keyword when declaring <code>x</code>, thus forbidding the compiler from optimizing the code in such a way.</p>
<h4 class="header"><i>1.5.3</i>Important point<a class="headerlink" href="#important-point" name="important-point">&para;</a></h4>
<p><strong>All shared variables must be protected by synchronization, with a synchronized block or the use of the volatile keyword.</strong></p>
<h2 class="header"><i>2</i>PThreads<a class="headerlink" href="#pthreads" name="pthreads">&para;</a></h2>
<blockquote>
<p>POSIX 1003.1c (POSIX Threads)</p>
</blockquote>
<p><strong>PThreads</strong> used to be the de-facto way to implement multithreading on Unix-compatible systems. Since it is a library, it can be linked with anything.</p>
<h3 class="header"><i>2.1</i>Thread creation<a class="headerlink" href="#thread-creation" name="thread-creation">&para;</a></h3>
<dl>
<dt><code>pthread_create(pthread_t *thread_handle, const pthread_attr_t *attr, void *(*start_routine) (void *), void *args);</code></dt>
<dd>A function to create a thread.</dd>
<dd><code>*thread_handle</code> points to a buffer. The function will store the thread ID inside.</dd>
<dd><code>*attr</code> points to a struct containing the thread's attributes.</dd>
<dd><code>*start_routine</code> points to a function the thread will execute (like <code>Thread.run()</code> in Java, but with arguments)</dd>
<dd><code>*args</code> points to the arguments of the function.</dd>
</dl>
<h4 class="header"><i>2.1.1</i>Attributes<a class="headerlink" href="#attributes" name="attributes">&para;</a></h4>
<ul>
<li>With the attributes, it is possible to declare a thread as <code>DETACHED</code> in which case we may not call <code>join()</code>.</li>
<li>By default, it is <code>JOINABLE</code> instead, in which case we actually <strong>must</strong> use <code>join()</code>. Otherwise, resources that would have been freed with <code>join()</code> would not be freed and resource exhaustion might happen.</li>
</ul>
<h3 class="header"><i>2.2</i>Scheduling model<a class="headerlink" href="#scheduling-model" name="scheduling-model">&para;</a></h3>
<p>It is possible to change the scheduling policy of a thread using the method <code>pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param)</code>.</p>
<dl>
<dt><code>SCHED_RR</code></dt>
<dd>Round-robin, time-sliced.</dd>
<dt><code>SCHED_FIFO</code></dt>
<dd>Run-to-completion.</dd>
<dt><code>SCHED_OTHER</code></dt>
<dd>Whatever else is available.</dd>
</dl>
<h3 class="header"><i>2.3</i>Mutual exclusion<a class="headerlink" href="#mutual-exclusion" name="mutual-exclusion">&para;</a></h3>
<p>You can define a <strong>mutex</strong>, a 1-bit lock, to achieve synchronization mechanisms.</p>
<dl>
<dt><code>pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)</code></dt>
<dd>A function to initialize a given mutex after it has been declared.</dd>
<dt><code>pthread_mutex_lock(pthread_mutex_t *mutex)</code></dt>
<dd>A function to lock a mutex by the current thread if no other thread has the lock.</dd>
<dt><code>pthread_mutex_unlock(pthread_mutex_t *mutex)</code></dt>
<dd>A function to unlock a mutex, thus letting any other thread lock it.</dd>
</dl>
<p>In general, the same thread should lock and unlock a mutex. Otherwise, there may be some unforeseen consequences.</p>
<p>Mutexes cannot (by default) be locked recursively. However, multiple vendors have created "vendor extensions" for PThreads which serve to make a programmer's life easier by adding features PThreads does not originally support.</p>
<h2 class="header"><i>3</i>Locks<a class="headerlink" href="#locks" name="locks">&para;</a></h2>
<p>The Peterson 2 process tie-breaker algorithm only worked with 2 processes. How could we generalize that?</p>
<h3 class="header"><i>3.1</i>Filter Algorithm<a class="headerlink" href="#filter-algorithm" name="filter-algorithm">&para;</a></h3>
<p>The filter algorithm generalizes the algorithm to work with <span>$n$</span> threads.</p>
<p><img alt="Filter Algorithm Figure 1" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-11.png" title="" /></p>
<p>There are <span>$n$</span> levels where threads can wait before the critical section. For each level, the threads are considered pair-by-pair, until there can be only one in the critical section.</p>
<p><img alt="Filter Algorithm Figure 2" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-12.png" title="" /><br />
There are two properties to consider:</p>
<ol>
<li>If more than 1 thread tries to get into a stage, at least one is blocked.</li>
<li>At least one thread entering some stage S succeeds.</li>
</ol>
<div class="codehilite"><pre><span class="c1">// Init</span>
<span class="kt">int</span> <span class="n">stage</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>   <span class="c1">// Like the flag variable, indexed by thread ID, initialized to {0, ..., 0}</span>
<span class="kt">int</span> <span class="n">waiting</span><span class="p">[</span><span class="n">n</span><span class="p">];</span> <span class="c1">// Like the turn variable, indexed by stages, initialized to {0, ..., 0}</span>

<span class="c1">// Enter</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">stage</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
  <span class="n">waiting</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">spin</span><span class="p">;</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="n">spin</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">id</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">stage</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">waiting</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">spin</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">spin</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Exit</span>
<span class="n">stage</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</pre></div>


<h2 class="header"><i>4</i>Correctness of the filter-lock algorithm<a class="headerlink" href="#correctness-of-the-filter-lock-algorithm" name="correctness-of-the-filter-lock-algorithm">&para;</a></h2>
<p><strong>lemma</strong>:</p>
<blockquote>
<p>There are at most <span>$n-i$</span> threads at level <span>$i$</span>. (<span>$0 \leq i \leq n-1$</span>)</p>
</blockquote>
<p>(a.k.a there will always be one thread not stuck). </p>
<h3 class="header"><i>4.1</i>Proof by induction<a class="headerlink" href="#proof-by-induction" name="proof-by-induction">&para;</a></h3>
<h4 class="header"><i>4.1.1</i>Base Case<a class="headerlink" href="#base-case" name="base-case">&para;</a></h4>
<p>At <span>$i = 0$</span>, we have <span>$\leq n$</span> threads, which is at most <span>$n-i = n$</span>. Trivial.</p>
<h4 class="header"><i>4.1.2</i>Inductive step<a class="headerlink" href="#inductive-step" name="inductive-step">&para;</a></h4>
<p><strong>Induction hypothesis</strong>: At level <span>$i-1$</span>, we have at most <span>$n-(i-1) = n-i+1$</span> threads.</p>
<p>At level <span>$i$</span>, we can use a proof by contradiction: Let's assume there are too many threads at this level. That is, <span>$n-i+1$</span> threads at level <span>$i$</span>.</p>
<p>Let <strong>T<sub>A</sub></strong> be the last threads to set <code>waiting[i] = A</code>.</p>
<p>For any other thread (at level <span>$i$</span>) <strong>T<sub>X</sub></strong>, it is setting <code>waiting[i] = X</code>, preceding <code>waiting[i] = A</code>.</p>
<p>We know that all <strong>T<sub>X</sub></strong> set <code>stage[x] = i</code> before setting <code>waiting[i] = X</code>.</p>
<p><code>stage[x] = i</code> <span>$\rightarrow$</span> <code>waiting[i] = x</code> <span>$\rightarrow$</span> <code>waiting[i] = A</code>.</p>
<p><strong>T<sub>A</sub></strong> reads <code>stage[x]</code> after it sets <code>waiting[i] = A</code>, once it starts inspecting the other threads.</p>
<p><code>stage[x] = i</code> <span>$\rightarrow$</span> <code>waiting[i] = x</code> <span>$\rightarrow$</span> <code>waiting[i] = A</code> <span>$\rightarrow$</span> <code>read_A(stage[x])</code>.</p>
<p>So <strong>T<sub>A</sub></strong> must have checked stage[x], it must have found it was greater or equal to <span>$i$</span>. We know it's the last one to set <code>waiting[i] = A</code>, so that means <strong>T<sub>A</sub></strong> is necessarily still spinning, which is a contradiction!</p>
<p><em>Q.E.D.</em></p>
<p><strong>We can also prove that this is starvation-free.</strong></p>
<h2 class="header"><i>5</i>Hardware support for mutual exclusion<a class="headerlink" href="#hardware-support-for-mutual-exclusion" name="hardware-support-for-mutual-exclusion">&para;</a></h2>
<p>We've seen a few algorithms for doing mutual exclusion. These algorithms work, but they're quite a bit of code to run. Those using a turn array also impose a constant number of threads constraint. To make it easier, the hardware will typically provide primitives for mutual exclusion.</p>
<h3 class="header"><i>5.1</i>Test-and-set instruction<a class="headerlink" href="#test-and-set-instruction" name="test-and-set-instruction">&para;</a></h3>
<p>This instruction basically does two things at once. It can be used for doing a very basic spin-lock.</p>
<div class="codehilite"><pre><span class="kt">int</span> <span class="nf">test_and_set</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">// The function is atomic!</span>
</pre></div>


<p>Despite the name, it is not a test in itself, but it provides the ability for the programmer to do a test.</p>
<h4 class="header"><i>5.1.1</i>Spin lock based with Test-and-set<a class="headerlink" href="#spin-lock-based-with-test-and-set" name="spin-lock-based-with-test-and-set">&para;</a></h4>
<div class="codehilite"><pre><span class="c1">// Init</span>
<span class="kt">int</span> <span class="n">lock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="c1">// Enter</span>
<span class="k">while</span> <span class="p">(</span><span class="n">test_and_set</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Spin</span>
<span class="c1">// Exit</span>
<span class="n">lock</span> <span class="o">=</span> <span class="mi">0</span>
</pre></div>


<p>Basically, the thread will try to set the lock to 1. Since <code>test_and_set</code> is atomic, if the value of <code>lock</code> was 0, then the thread was the first to set it to 1, and thus acquired the lock. Otherwise, it means another threads has acquired it before, so the thread should spin.</p>
<p>It is much easier, there is less code, but it does not have the same nice properties as the other algorithms had; instead of respecting the order of the threads, only the "luckiest" thread is the one to run.</p>
<h4 class="header"><i>5.1.2</i>Test-and-test-and-set<a class="headerlink" href="#test-and-test-and-set" name="test-and-test-and-set">&para;</a></h4>
<p>The spin lock with the <code>test_and_lock</code> keeps writing to the value during its test. This makes the algorithm quite a bit expensive. A slight variation of the usage of <code>test_and_lock</code> is to add a layer of testing around it. This allows to read only, and only write when it should.</p>
<div class="codehilite"><pre><span class="n">delay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">lock</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">TS</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">);</span>
    <span class="n">delay</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// exponential back-off (a variation)</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>


<h3 class="header"><i>5.2</i>Fetch-and-add<a class="headerlink" href="#fetch-and-add" name="fetch-and-add">&para;</a></h3>
<p><code>test_and_set</code> only sets something, but maybe one would want to atomically increment and find out what the old value was (e.g. for the Ticket Algorithm). That's what <code>fetch_and_add</code> does.</p>
<div class="codehilite"><pre><span class="kt">int</span> <span class="nf">fetch_and_add</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
  <span class="n">v</span> <span class="o">=</span> <span class="n">v</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">// All atomic</span>
</pre></div>


<p>Building a spin lock with it is possible, but it is left as an exercise (look out for overflow).</p>
<h3 class="header"><i>5.3</i>Compare-and-swap<a class="headerlink" href="#compare-and-swap" name="compare-and-swap">&para;</a></h3>
<p>People quickly found there's actually a better way of doing things. Most hardware nowadays will have something usually called <code>compare_and_swap</code>. It is slightly more powerful: it is going to set a variable to something, but only if its former value is equal to something else.</p>
<div class="codehilite"><pre><span class="c1">// Set x to b if x == a</span>
<span class="kt">int</span> <span class="nf">compare_and_swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">a</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

  <span class="n">x</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">// Atomic</span>
</pre></div>


<p>Building a spin lock with it is possible as well, but again, it is left as an exercise.</p>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
