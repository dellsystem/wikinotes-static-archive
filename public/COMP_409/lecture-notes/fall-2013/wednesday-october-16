<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_409/">
                COMP 409
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Wednesday, October 16, 2013
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Wednesday, October 16, 2013
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
            <div class="sub header">
                Semantics of condition variables, Java&#x27;s implementation of locking and the Readers and Writers Problem
            </div>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <div class="toc">
<ul>
<li><a href="#expressiveness">1 Expressiveness</a><ul>
<li><a href="#consensus">1.1 Consensus</a><ul>
<li><a href="#proof">1.1.1 Proof</a><ul>
<li><a href="#critical-state">1.1.1.1 Critical State</a></li>
</ul>
</li>
<li><a href="#with-test-and-set">1.1.2 With Test-and-set</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#splitter">2 Splitter</a></li>
</ul>
</div>
<h2 class="header"><i>1</i>Expressiveness<a class="headerlink" href="#expressiveness" name="expressiveness">&para;</a></h2>
<p>Let's look at the <strong>expressiveness</strong> of some of the <strong>primary operations</strong> we have been looking at, in a way to try and understand how some of our concurrency primitives for locking behaviors might actually be better or worse than other ones.</p>
<p>We have already seen a lot of concurrency primitives such as <strong>atomic variables/registers</strong> as well as special instructions like <strong>test-and-set</strong>, <strong>test-and-test-and-set</strong>, <strong>fetch-and-add</strong> and <strong>compare-and-swap</strong>.</p>
<p>Based on these, we have some locking approaches. The special instructions do slightly different things, some of which are better in certain circumstances. It's easy to build a test-and-set lock, even easier with a compare-and-swap as the <code>if</code> is embedded inside of it; fetch-and-add is good for atomic increments, decrements.</p>
<p>Given only these concurrency primitives, we can build anything. For example, the filter lock only used atomic variable. With it, a test-and-set operation can be built by locking the test-and-set section as a critical section.</p>
<p>Compare-and-swap can be built with test-and-set. The process is to create a basic spin lock and use that to lock some global piece of data, making sure that what is done in the critical section is mutually exclusive to anyone else.</p>
<div class="codehilite"><pre><span class="kt">int</span> <span class="nf">CAS</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">rC</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">TS</span><span class="p">(</span><span class="n">cas_lock</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Spin</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">rC</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">rC</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cas_lock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">rC</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<p>In one perspective, there is no difference between the special instructions. Once a lock is built, anything can be done. Expressiveness is not much of a concern in this respect. However, there is one kind of unsatisfying property, that of the spin lock.</p>
<p>The spin lock makes it that a thread may spin for an arbitrary long amount of time, yet that is not a property that compare-and-swap had originally. Compare-and-swap is supposed to be an atomic operation which finishes in a finite amount of time, irrespective of any other thread. That is, even if another thread crashed, it would still finish. It is <strong>fault-tolerant</strong>.</p>
<p>That is not true of our makeshift solution. If another thread fails for whatever reason, then a thread can be stuck forever. Can we build Compare-and-swap in a <strong>wait-free</strong> way?</p>
<dl>
<dt>Wait-free operation</dt>
<dd>Finite number of steps</dd>
<dd>Fault-tolerant</dd>
</dl>
<p>Simply using a lock cannot create a wait-free operation.</p>
<h3 class="header"><i>1.1</i>Consensus<a class="headerlink" href="#consensus" name="consensus">&para;</a></h3>
<p>We have <code>n</code> processes/threads, each starting with a different value, and we want them to <strong>all agree</strong> on a value, that is, to achieve <strong>consensus</strong>.</p>
<dl>
<dt>Requirements</dt>
<dd><strong>Consistent</strong>: At the end of the protocol, all should agree.</dd>
<dd><strong>Valid</strong>: The agreed value is one of the input values. It cannot be an arbitrary value.</dd>
<dd><strong>Wait-free</strong></dd>
</dl>
<p>The consensus problem can be solved for a <strong>certain number</strong> of processes or threads, but not necessarily for an arbitrary one. As such, concurrency operations can be distinguished by their <strong>consensus number</strong>.</p>
<dl>
<dt>Consensus number</dt>
<dd>Maximum number of processes for which a concurrency primitive can solve consensus.</dd>
</dl>
<p>For simple atomic read and write operations on atomic variables/registers, the consensus number is 1.</p>
<h4 class="header"><i>1.1.1</i>Proof<a class="headerlink" href="#proof" name="proof">&para;</a></h4>
<p>We can think of a protocol with a <strong>binary consensus</strong>. That is, the number is 0 or 1, with 2 threads. In any protocol that we have, we start out with some state where the agreed value could either be 0 or 1. From this state, maybe <strong>Thread<sub>0</sub></strong> or <strong>Thread<sub>1</sub></strong> might make an action.</p>
<p><img alt="Binary Consensus" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-18.png" title="" /></p>
<p>We can start thinking about the <strong>state-space evolution</strong> of the program. After <strong>Thread<sub>0</sub></strong> does something, there is still no agreement: it could be 0 or 1. Maybe, after <strong>Thread<sub>1</sub></strong> does something, <strong>Thread<sub>0</sub></strong> might do something to finish the protocol, but at a certain point, if this is solving consensus, there should be <strong>a state where a value is committed</strong>. At any state after that, the same value will still be committed.</p>
<dl>
<dt>Bivalent state</dt>
<dd>A state where there are two possible values</dd>
<dt>Univalent state</dt>
<dd>A state where there is only one possible value</dd>
</dl>
<p>The idea of a wait-free algorithm is that after some sequence of actions by <strong>Thread<sub>0</sub></strong> and <strong>Thread<sub>1</sub></strong>, we should reach a point, starting form a <strong>bivalent state</strong>, where we end up in an <strong>univalent state</strong>.</p>
<h5 class="header"><i>1.1.1.1</i>Critical State<a class="headerlink" href="#critical-state" name="critical-state">&para;</a></h5>
<p><img alt="Critical State" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-19.png" title="" /><br />
A <strong>critical state</strong> is the lowest bivalent state in a protocol (last to happen). That is, all subsequent states are univalent. We reach some point where the state is bivalent, but no matter the choice that is made, we end up in a tree of univalent states.</p>
<p>Back to the proof, suppose we have a bivalent critical state.<br />
<img alt="Binary state consensus" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-20.png" title="" /></p>
<p>If we only have atomic variables/registers, the only thing that could be done in that critical state is read or write some data. To change to a different state, then either <strong>Thread<sub>0</sub></strong> did a Read-or-write first, or <strong>Thread<sub>1</sub></strong> did one first.</p>
<p><strong>Case A)</strong> <strong>Thread<sub>0</sub></strong> reads first, and <strong>Thread<sub>1</sub></strong> does something (read or write)</p>
<p><img alt="Case A" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-21.png" title="" /></p>
<p>If <strong>Thread<sub>0</sub></strong> is doing a read, then that does not matter to <strong>Thread<sub>1</sub></strong> as no data is changed. That action is not visible to <strong>Thread<sub>1</sub></strong>. As such, if <strong>Thread<sub>0</sub></strong> reads first, then we should end up in the <strong>0-subtree</strong>. However, since the read is invisible to <strong>Thread<sub>1</sub></strong>, then its action should end up in the <strong>same subtree</strong> as that of doing its action at the critical state. This is a <strong>contradiction</strong>, so Thread<sub>0</sub>'s action cannot be a read.</p>
<p><strong>Case B)</strong> <strong>Thread<sub>0</sub></strong> writes <code>x</code>, and <strong>Thread<sub>1</sub></strong> writes <code>x</code> as well.</p>
<p><img alt="Case B" src="http://cs.mcgill.ca/~ejanco/wikinotes/c409-22.png" title="" /></p>
<p>If they write to the same variable, then we have the same problem as in case A. Since <strong>Thread<sub>1</sub></strong>'s action does not need <code>x</code>'s value, <strong>Thread<sub>0</sub></strong>'s action is again invisible. <strong>Thread<sub>1</sub></strong> could simply overwrite what <strong>Thread<sub>0</sub></strong> did. Just like in <strong>Case A</strong>, we end up with a contradiction.</p>
<p><strong>Case C)</strong> <strong>Thread<sub>0</sub></strong> writes <code>x</code>, and <strong>Thread<sub>1</sub></strong> writes <code>y</code>.<br />
This is left as an exercise.</p>
<p>With all things considered, an atomic read-or-write cannot solve consensus for 2 or more threads. As such, it can only reach consensus with a single thread.</p>
<h4 class="header"><i>1.1.2</i>With Test-and-set<a class="headerlink" href="#with-test-and-set" name="with-test-and-set">&para;</a></h4>
<p>We can solve consensus with 2 threads using test-and-set.</p>
<div class="codehilite"><pre><span class="c1">// Return agreed value, input value unique to a thread</span>
<span class="kt">int</span> <span class="nf">decide</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">TS</span><span class="p">(</span><span class="n">decider</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span> <span class="c1">// Decider is initialized to SPECIAL_VALUE</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">SPECIAL_VALUE</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">input</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<p>With test-and-set, we can make up one <code>SPECIAL_VALUE</code> that we initialize the variable <code>decider</code> to. We can then do test-and-set and see if it's that special value. If a thread does not get that special value, then another did it before. If it does get it, then it was the first to do test-and-set.</p>
<p>Test-and-set, Fetch-and-add and a lot of others have a consensus number of 2. Compare-and-swap, however, has a consensus number of theoretically <span>$\infty$</span> (practically, a very big number). It is significantly better than anything else out there. </p>
<div class="codehilite"><pre><span class="kt">int</span> <span class="nf">decide</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">CAS</span><span class="p">(</span><span class="n">decider</span><span class="p">,</span> <span class="n">SPECIAL_VALUE</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span> <span class="c1">// Decider is initialized to SPECIAL_VALUE</span>
    <span class="k">return</span> <span class="n">decider</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<p>What goes on is that if the <code>decider</code> variable is equal to <code>SPECIAL_VALUE</code>, then the first thread can set it equal to its input. After that, any other thread will fail CAS's condition, and so will return <code>decider</code>, just like the first thread. That is, all the threads will return the same value.</p>
<h2 class="header"><i>2</i>Splitter<a class="headerlink" href="#splitter" name="splitter">&para;</a></h2>
<p>Something something renaming algorithm (check Art of Multiprocessor Programming, p.44)<br />
<img alt="" src="https://cloud.githubusercontent.com/assets/1909539/4674876/7bb6f788-559e-11e4-943e-4d251f59fabf.png" /></p>
<p>Imagine a grid of squares like this one. Actually, more like a grid:<br />
<img alt="" src="https://cloud.githubusercontent.com/assets/1909539/4674897/0fe4a126-559f-11e4-8039-509ac9f453f4.png" /></p>
<div class="codehilite"><pre><span class="n">x</span> <span class="o">=</span> <span class="n">id</span>
<span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">RIGHT</span>
<span class="k">else</span> <span class="n">y</span> <span class="o">=</span> <span class="n">id</span>
    <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">id</span><span class="o">)</span> <span class="n">DOWN</span>
    <span class="n">STOP</span>
</pre></div>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
