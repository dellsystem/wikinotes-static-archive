<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_409/">
                COMP 409
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Monday, November 18, 2013
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Monday, November 18, 2013
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
            <div class="sub header">
                PGAS languages and transactional programming
            </div>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <div class="toc">
<ul>
<li><a href="#x10-continued">1 X10 continued</a></li>
<li><a href="#generic-condition-synchronization">2 Generic condition synchronization</a></li>
<li><a href="#placeslocations">3 Places/locations</a></li>
<li><a href="#work-distribution">4 Work distribution</a></li>
<li><a href="#fibonacci">5 Fibonacci</a></li>
</ul>
</div>
<h2 class="header"><i>1</i>X10 continued<a class="headerlink" href="#x10-continued" name="x10-continued">&para;</a></h2>
<div class="codehilite"><pre><span class="n">async</span> <span class="n">s</span><span class="o">;</span> <span class="c1">// mini thread, no handle, lightweight</span>
<span class="n">finish</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">async</span> <span class="o">{</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]++}</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="c1">// all fors done</span>
<span class="n">finish</span> <span class="n">s</span> <span class="c1">// all async done</span>
</pre></div>


<div class="codehilite"><pre><span class="n">finish</span> <span class="o">{</span>
  <span class="n">async</span> <span class="o">{</span>
    <span class="n">finish</span> <span class="o">{</span>
      <span class="n">async</span> <span class="o">{</span><span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="o">}</span>
      <span class="c1">// x E {0, 2}</span>
    <span class="o">}</span> <span class="c1">// x E {2}</span>
    <span class="n">x</span><span class="o">++</span>
    <span class="c1">// x E {3}</span>
  <span class="o">}</span> <span class="c1">// x E {0, 2, 3}</span>
<span class="o">}</span> <span class="c1">// x E {3}</span>
</pre></div>


<h2 class="header"><i>2</i>Generic condition synchronization<a class="headerlink" href="#generic-condition-synchronization" name="generic-condition-synchronization">&para;</a></h2>
<div class="codehilite"><pre><span class="n">when</span> <span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">S</span>
<span class="c1">// wait for C to be true -&gt; atomically do S</span>
<span class="c1">// C should be pure (might be execed many times)</span>
</pre></div>


<p>Constraints on C, S:</p>
<ul>
<li>sequential (no async)</li>
<li>nonblocking (no finish)</li>
<li>local (this place)</li>
</ul>
<h2 class="header"><i>3</i>Places/locations<a class="headerlink" href="#placeslocations" name="placeslocations">&para;</a></h2>
<p>There are many places. Places are (logical) locations (actual binding to machines is done by RT).</p>
<div class="codehilite"><pre><span class="n">at</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="n">S</span> <span class="c1">// execute S at place p</span>
</pre></div>


<p>This'll serialize the data and make a copy (expensive) on p.<br />
N.B. not copied back: <code>x=at(p) E</code></p>
<h2 class="header"><i>4</i>Work distribution<a class="headerlink" href="#work-distribution" name="work-distribution">&para;</a></h2>
<p><span>$C=PE$</span><br />
<span>$\sum\limits_{k=0}^{n-1} a_{ix}b_{kj} $</span><br />
^ can be concurrently done!</p>
<div class="codehilite"><pre><span class="kd">class</span> <span class="nc">worker</span> <span class="kd">extends</span> <span class="n">thread</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="n">col</span>
  <span class="n">worker</span> <span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">)</span> <span class="o">{}</span>
  <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">dot</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">k</span> <span class="n">from</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">dot</span> <span class="o">+=</span> <span class="n">A</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">*</span> <span class="n">B</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">col</span><span class="o">]</span>
    <span class="o">}</span>
    <span class="n">C</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">dot</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//</span>
<span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">from</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="n">from</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">n</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">worker</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span>
      <span class="n">n</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">start</span><span class="o">()</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p>lots of threads not doing much work. Not efficient, high overhead.</p>
<p>Partition the array + use a thread pool.</p>
<p>Java has thread pool (executor framework)</p>
<div class="codehilite"><pre><span class="n">executor</span> <span class="n">ex</span> <span class="o">=</span> <span class="o">{</span>
  <span class="n">ex</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">)</span> <span class="c1">// may or may not create a new thread</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">directEx</span> <span class="kd">implements</span> <span class="n">Executor</span> <span class="o">{</span>
  <span class="n">execute</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">r</span><span class="o">.</span><span class="na">run</span><span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="c1">// no thread created</span>
<span class="kd">class</span> <span class="nc">asyncEx</span> <span class="n">Executor</span><span class="o">{</span>
  <span class="n">execute</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">).</span><span class="na">start</span><span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p>Executor interface is limited. How to wait for thread? How to return value from execution?</p>
<p>Executor fence<br />
Callable &lt;V&gt; interface<br />
Like Runnable but can return something &amp; throw exceptions</p>
<div class="codehilite"><pre><span class="n">submit</span><span class="o">(</span><span class="n">callable</span><span class="o">)</span> <span class="c1">// get return value from callable</span>
<span class="c1">// returns a Future&lt;V&gt; (promise)</span>
<span class="n">y</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Future</span><span class="o">(</span><span class="n">task</span><span class="o">)</span> <span class="c1">// (maybe) spawn a thread to execute task</span>
<span class="c1">// later...</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="c1">// blocks an wait til task is done</span>
</pre></div>


<div class="codehilite"><pre><span class="kd">class</span> <span class="nc">Future</span> <span class="o">{</span>
  <span class="n">callable</span> <span class="n">c</span>
  <span class="nf">Future</span><span class="o">(</span><span class="n">callable</span> <span class="n">c</span><span class="o">)</span> <span class="o">{}</span>
  <span class="n">get</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">c</span><span class="o">.</span><span class="na">call</span><span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p>ThreadPoolExecutor: a pool of threads (capped). Queue job of all threads currently busy (empty pool).</p>
<h2 class="header"><i>5</i>Fibonacci<a class="headerlink" href="#fibonacci" name="fibonacci">&para;</a></h2>
<div class="codehilite"><pre><span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span>
  <span class="n">Future</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Future</span><span class="o">(</span><span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">))</span>
  <span class="k">return</span> <span class="nf">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
<span class="o">}</span>
</pre></div>


<p>(Node: computation. Edge: dependency)<br />
<img alt="" src="https://cloud.githubusercontent.com/assets/1909539/5156198/4eee7ed0-727f-11e4-8ee7-22fe8edce71c.png" /></p>
<p>This translates to:</p>
<p><img alt="" src="https://cloud.githubusercontent.com/assets/1909539/5157021/00d4c7ba-72be-11e4-99f2-2459209b55c7.png" /><br />
With infinite processors, can execute nodes/computations in the dependency dag.<br />
What’s the minimum time it’ll take?<br />
The largest dependency chain is a lower bound. Critical path = 8 (ADGHKIFC).</p>
<p>Speedup: <span>$T_1 = 17$</span>. <span>$T_\infty = 8$</span>. <span>$17/8 &gt; 2$</span><br />
Notation:<br />
<span>$T_n$</span>: time taken for n processors<br />
<span>$T_1$</span>: sequential</p>
<p>In practice, you have a fixed # of processors.<br />
What’s the speedup for <span>$T_2$</span>, <span>$T_4$</span>? Need to know the schedule. How/when/where tasks are assigned.<br />
We need a clever scheduler. Greedy scheduler works well.<br />
But anything would give less than 2x speedup (Graham Brent Theorem).</p>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
