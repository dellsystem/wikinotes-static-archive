<head>
    <title>Wikinotes</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/semantic.min.css" />
    <link rel="stylesheet" href="/static/styles.css" />
    <meta name="viewport" content="width=device-width">
    
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    TeX: {
        extensions: ['cancel.js']
    },
    tex2jax: {
        inlineMath: [  ['$', '$'] ],
        processEscapes: true
    }
});
</script>

</head>
<body>
    
    <div id="header" class="ui container">
        <a href="/">
            <img src="/static/img/logo-header.png" class="ui image" />
        </a>
    </div>
    
    <div id="content">
        <div class="ui container">
            
<div class="ui container">
    <div class="ui secondary segment">
        <div class="ui large breadcrumb">
            <a class="section" href="/">Home</a>
            <i class="right chevron icon divider"></i>
            <a class="section" href="/COMP_303/">
                COMP 303
            </a>
            <i class="right chevron icon divider"></i>
            <span class="active section">
                
                Design Patterns
                
            </span>
        </div>
    </div>
    <h1 class="ui header">
        <div class="content">
            
            Design Patterns
            
            <span>
                <a href="http://creativecommons.org/licenses/by-nc/3.0/">
                    <img src="/static/img/cc-by-nc.png" alt="CC-BY-NC"
                         title="Available under a Creative Commons Attribution-NonCommercial 3.0 Unported License" />
                </a>
            </span>
            
        </div>
    </h1>
    <div class="ui icon list">
        <div class="item">
            <i class="user icon"></i>
            <div class="content">
                <strong>Maintainer:</strong> admin
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
    <div id="wiki-content">
	
        <div class="toc">
<ul>
<li><a href="#iterator">1 Iterator</a></li>
<li><a href="#observer">2 Observer</a></li>
<li><a href="#strategy">3 Strategy</a></li>
<li><a href="#composite">4 Composite</a></li>
<li><a href="#decorator">5 Decorator</a></li>
<li><a href="#facade">6 Facade</a></li>
<li><a href="#singleton">7 Singleton</a></li>
<li><a href="#flyweight">8 Flyweight</a></li>
<li><a href="#command">9 Command</a></li>
<li><a href="#prototype">10 Prototype</a></li>
<li><a href="#visitor">11 Visitor</a></li>
</ul>
</div>
<h2 class="header"><i>1</i>Iterator<a class="headerlink" href="#iterator" name="iterator">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">class</span> <span class="nc">MyList</span> <span class="kd">implements</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p><img alt="Class Diagram" src="http://i.imgur.com/pdZ3ufT.png" /></p>
<h2 class="header"><i>2</i>Observer<a class="headerlink" href="#observer" name="observer">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Observable</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">obs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;();</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">changed</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">o</span><span class="o">){</span>
        <span class="n">obs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setChanged</span><span class="o">(){</span>
        <span class="n">changed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyAll</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">changed</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="n">Observer</span> <span class="nl">ob:</span><span class="n">obs</span><span class="o">){</span>
                <span class="n">ob</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">changed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>


<p><img alt="" src="http://i.imgur.com/E4KXX.png" title="" /></p>
<h2 class="header"><i>3</i>Strategy<a class="headerlink" href="#strategy" name="strategy">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">E</span> <span class="n">a</span><span class="o">,</span> <span class="n">E</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="n">Class</span> <span class="n">Sorter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;{</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">sort</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">e</span><span class="o">){</span>
        <span class="c1">// sort using the comparator</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStrategy</span><span class="o">(</span><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">comparator</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompareBySize</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">E</span> <span class="n">a</span><span class="o">,</span> <span class="n">E</span> <span class="n">b</span><span class="o">){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompareByColour</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">E</span> <span class="n">a</span><span class="o">,</span> <span class="n">E</span> <span class="n">b</span><span class="o">){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p><img alt="" src="http://i.imgur.com/Xcqwe.png" title="" /></p>
<h2 class="header"><i>4</i>Composite<a class="headerlink" href="#composite" name="composite">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractFile</span><span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Directory</span> <span class="kd">extends</span> <span class="n">AbstractFile</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">AbstractFile</span><span class="o">&gt;</span> <span class="n">files</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">totalSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="n">AbstractFile</span> <span class="nl">f:</span><span class="n">files</span><span class="o">){</span>
            <span class="n">totalSize</span><span class="o">+=</span><span class="n">f</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">totalSize</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">File</span> <span class="kd">extends</span> <span class="n">AbstractFile</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<p><img alt="" src="http://i.imgur.com/Bj6Bu.png" title="" /></p>
<h2 class="header"><i>5</i>Decorator<a class="headerlink" href="#decorator" name="decorator">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Frame</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op1</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op2</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op3</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlainPart</span> <span class="kd">implements</span> <span class="n">Frame</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op1</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op2</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op3</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DecoratedPart</span> <span class="kd">implements</span> <span class="n">Frame</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">PlainPart</span> <span class="n">p</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">DecoratedPart</span><span class="o">(</span><span class="n">PlainPart</span> <span class="n">p</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op1</span><span class="o">(){</span>
        <span class="n">p</span><span class="o">.</span><span class="na">op1</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op2</span><span class="o">(){</span>
        <span class="n">p</span><span class="o">.</span><span class="na">op2</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op3</span><span class="o">(){</span>
        <span class="n">p</span><span class="o">.</span><span class="na">op3</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// concrete decorator</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedPart</span> <span class="kd">extends</span> <span class="n">DecoratedPart</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">RedPart</span><span class="o">(</span><span class="n">Frame</span> <span class="n">p</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">paint</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">){</span>
    <span class="c1">// being red n shit</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">main</span><span class="o">(</span><span class="n">args</span><span class="o">){</span>
        <span class="n">DecoratedPart</span> <span class="n">myPart</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RedPart</span><span class="o">(</span><span class="k">new</span><span class="o">(</span><span class="n">PlainPart</span><span class="o">());</span>
        <span class="c1">// do some magic with myPart!</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<h2 class="header"><i>6</i>Facade<a class="headerlink" href="#facade" name="facade">&para;</a></h2>
<div class="codehilite"><pre><span class="c1">// this class is written by some biologist</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SarcoplasmicReticulum</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">releaseCalcium</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Myosin</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">relax</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hydrolysis</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Troponin</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bindCalcium</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hydrolysis</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tropomyosin</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fallAway</span><span class="o">(){</span>
        <span class="c1">// implementaion</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// the facade class</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MuscleCell</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">Myosin</span> <span class="n">m</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Troponin</span> <span class="n">t</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Tropomyosin</span> <span class="n">tm</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">SarcoplasmicReticulum</span> <span class="n">sr</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contract</span><span class="o">(){</span>
        <span class="n">sr</span><span class="o">.</span><span class="na">releaseCalcium</span><span class="o">();</span>
        <span class="n">t</span><span class="o">.</span><span class="na">bindCalcium</span><span class="o">();</span>
        <span class="n">t</span><span class="o">.</span><span class="na">hydrolysis</span><span class="o">();</span>
        <span class="n">tm</span><span class="o">.</span><span class="na">fallAway</span><span class="o">();</span>
        <span class="n">m</span><span class="o">.</span><span class="na">hydrolysis</span><span class="o">();</span>
        <span class="n">m</span><span class="o">.</span><span class="na">relax</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwoleGuy</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">MuscleCell</span> <span class="o">[]</span> <span class="n">m</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">squatz</span><span class="o">(){</span>
        <span class="k">for</span><span class="o">(</span><span class="n">MuscleCell</span> <span class="n">mc</span> <span class="o">:</span> <span class="n">m</span><span class="o">){</span>
            <span class="n">mc</span><span class="o">.</span><span class="na">contract</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">oatz</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<h2 class="header"><i>7</i>Singleton<a class="headerlink" href="#singleton" name="singleton">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sun</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Sun</span> <span class="n">ourSun</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sun</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Sun</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">ourSun</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Sun</span><span class="o">(){}</span>
<span class="o">}</span>
</pre></div>


<h2 class="header"><i>8</i>Flyweight<a class="headerlink" href="#flyweight" name="flyweight">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CardFactory</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Card</span><span class="o">&gt;</span> <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Card</span> <span class="nf">getCard</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cards</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">cards</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="n">Card</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Card</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">cards</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span> 
<span class="o">}</span>
</pre></div>


<div class="codehilite"><pre><span class="n">Card</span> <span class="n">c</span> <span class="o">=</span> <span class="n">CardFactory</span><span class="o">.</span><span class="na">getCard</span><span class="o">(</span><span class="s">&quot;Black Ace&quot;</span><span class="o">);</span>
<span class="n">Card</span> <span class="n">d</span> <span class="o">=</span> <span class="n">CardFactory</span><span class="o">.</span><span class="na">getCard</span><span class="o">(</span><span class="s">&quot;Black Ace&quot;</span><span class="o">);</span>
<span class="n">c</span> <span class="o">==</span> <span class="n">d</span> <span class="c1">// this is true</span>
</pre></div>


<h2 class="header"><i>9</i>Command<a class="headerlink" href="#command" name="command">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Method</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ship</span><span class="o">{</span>
    <span class="kd">private</span> <span class="n">Method</span> <span class="n">thingToDo</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">setThingToDo</span><span class="o">(</span><span class="n">Method</span> <span class="n">m</span><span class="o">){</span>
        <span class="n">thingToDo</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">doThings</span><span class="o">(){</span>
        <span class="n">thingToDo</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Commander</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sail</span><span class="o">(){</span>
        <span class="n">Ship</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ship</span><span class="o">();</span>
        <span class="n">s</span><span class="o">.</span><span class="na">setThingToDo</span><span class="o">(</span><span class="k">new</span> <span class="n">Method</span> <span class="n">m</span><span class="o">(){</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
                <span class="c1">// things</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">s</span><span class="o">.</span><span class="na">doThings</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<h2 class="header"><i>10</i>Prototype<a class="headerlink" href="#prototype" name="prototype">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Prototype</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op1</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op2</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">op3</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlanA</span> <span class="kd">implements</span> <span class="n">Prototype</span><span class="o">,</span> <span class="n">Cloneable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">op1</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">op2</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">op3</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">PlanA</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span><span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">PlanA</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlanB</span> <span class="kd">implements</span> <span class="n">Prototype</span><span class="o">,</span> <span class="n">Cloneable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">op1</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">op2</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">op3</span><span class="o">(){</span>
        <span class="c1">// implementation</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">PlanB</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span><span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">PlanB</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(){</span>
        <span class="n">PlanA</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PlanA</span><span class="o">();</span>
        <span class="n">PlanB</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PlanB</span><span class="o">();</span>
        <span class="n">Prototype</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="n">Prototype</span><span class="o">)</span><span class="n">a</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
        <span class="n">Prototype</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">Prototype</span><span class="o">)</span><span class="n">b</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>


<h2 class="header"><i>11</i>Visitor<a class="headerlink" href="#visitor" name="visitor">&para;</a></h2>
<div class="codehilite"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Visitable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="n">Visitable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">v</span><span class="o">){</span>
        <span class="n">v</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{}</span>
    <span class="cm">/**</span>
<span class="cm">    book stuff</span>
<span class="cm">    **/</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="kd">implements</span> <span class="n">Visitable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">v</span><span class="o">){</span>
        <span class="n">v</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">watch</span><span class="o">()</span> <span class="o">{}</span>
    <span class="cm">/**</span>
<span class="cm">    movie stuff</span>
<span class="cm">    **/</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Visitor</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Book</span> <span class="n">b</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Movie</span> <span class="n">m</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="n">Visitor</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Book</span> <span class="n">b</span><span class="o">){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Movie</span> <span class="n">m</span><span class="o">){</span>
        <span class="n">m</span><span class="o">.</span><span class="na">watch</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Vistable</span><span class="o">&gt;</span> <span class="n">stuff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Visitable</span><span class="o">&gt;();</span>
        <span class="cm">/*... put stuff in stuff*/</span>
        <span class="n">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">Visitable</span> <span class="nl">v:</span> <span class="n">stuff</span><span class="o">){</span>
            <span class="n">v</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">p</span><span class="o">);</span> <span class="c1">// the person will read/watch depending on the type of stuff</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
	
    </div>
</div>

        </div>
    </div>
    <div id="footer" class="ui container">
        <div class="ui stackable grid">
            <div class="twelve wide column">
                <p>
                    Built by <a href="https://twitter.com/dellsystem">
                    @dellsystem</a>. Content is student-generated. <a
                    href="https://github.com/dellsystem/wikinotes">See the old codebase on GitHub</a>
                </p>
            </div>
            <div class="four wide right aligned column">
                <p><a href="#header">Back to top</a></p>
            </div>
        </div>
    </div>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-28456804-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
